webpackJsonp([0],{27:function(n,t,e){var r=e(1)(e(289),e(344),null,null);n.exports=r.exports},283:function(n,t,e){"use strict";var r=e(309),a=e.n(r),o=e(312),s=e.n(o),i=e(300),l=e.n(i),c=e(301),p=e.n(c),u=e(299),m=e.n(u),d=e(316),h=e.n(d),g=e(302),f=e.n(g),b=e(304),_=e.n(b),v=e(303),y=e.n(v),j=e(306),w=e.n(j),x=e(307),k=e.n(x),T=e(305),P=e.n(T),R=e(324),S=e.n(R),I=e(325),C=e.n(I),E=e(326),q=e.n(E),N=e(327),A=e.n(N),D=e(328),U=e.n(D),O=e(311),F=e.n(O),M=e(323),L=e.n(M),z=e(318),$=e.n(z),J=e(313),B=e.n(J),V=e(310),Y=e.n(V),G=e(322),W=e.n(G),H=e(321),Q=e.n(H),X=e(320),K=e.n(X),Z=e(314),nn=e.n(Z),tn=e(315),en=e.n(tn),rn=e(317),an=e.n(rn),on=e(319),sn=e.n(on);t.a={consolelog:a.a,hexoThemeMake:s.a,JsFloatBug:l.a,JsToObj:p.a,JSONPBaidu:m.a,mobileOr:h.a,PromiseReturn:f.a,ReactNote:_.a,ReactPropTypes:y.a,SqlDayofweek:w.a,SqlGroupIF:k.a,SqlUUID:P.a,tempTable:S.a,uploadFile:C.a,vueProps:q.a,webpackNote:A.a,zeptoGetScript:U.a,disqusReset:F.a,scrollDirection:L.a,paddingSquare:$.a,justifyLayout:B.a,createReact:Y.a,reactRouter:W.a,reactRedux:Q.a,reactPPT:K.a,macvim1:nn.a,macvim2:en.a,ohmyzsh:an.a,qshellWorkflow:sn.a}},289:function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=e(283);t.default={name:"article",data:function(){return{str:""}},mounted:function(){console.log(this),this.str=r.a[this.$route.params.name],window.DISQUS&&window.reset(this.$route.params.name,"http://liujians.me/"+this.$route.params.name,this.$route.params.name)}}},299:function(n,t){n.exports='### 使用JSONP 跨域调取百度API\r\n\r\n2016-12-02 liujians\r\n\r\n这些日子做公司的项目、PC站要用到IP定位\r\n\r\n就使用了百度2016年8月26日才推出的高精度IP定位、误差在80m范围内\r\n\r\n前端调取百度API算跨域、所以这里就想到了JSONP\r\n\r\n然而百度的工程师早就想到了给我们提供JSONP的接口、所以自然而然地在API传入参数就好了\r\n\r\nhttp://api.map.baidu.com/highacciploc/v1?qterm=pc&ak=请输入您的AK&coord=bd09ll&callback_type=jsonp&callback=test\r\n\r\n我们再callback_type参数中传入jsonp，并且在callback传入回调函数名\r\n\r\n将回调函数做全局使用\r\n\r\n\tfunction test(data){\r\n\t\t//这里的data就是JSONP取到的数据对象\r\n\t}\r\n\t\r\n\t//返回结果例子\r\n\t{\r\n\t"content":{\r\n\t\t\t"location":\t{\r\n\t\t\t\t"lat":30.653839,\r\n\t\t\t\t"lng":104.093354\r\n\t\t\t\t},\r\n\t\t\t"locid":"973d0dc2e6340f7bfc8eb29993a0de9d",\r\n\t\t\t"radius":30,\r\n\t\t\t"confidence":1.0\r\n\t\t\t},\r\n\t"result":{"error":161,"loc_time":"2016-12-02 09:17:51"}}\r\n\r\n最重要的地方就是callback_type 和callback 两个参数了\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)'},300:function(n,t){n.exports="### 单精度计算时遇到的bug\r\n\r\n2016-12-15 liujians\r\n\r\njs单精度计算时遇到的相关bug\r\n\r\n闲暇时候尝试\r\n\r\n\t2.2 + 2.1 = 4.300000000000001 \r\n\t2.2 - 1.9 = 0.30000000000000027 \r\n\t2.2 * 2.2 = 4.840000000000001 \r\n\t2.1 / 0.3 = 7.000000000000001\r\n\r\n记录一下、以后可以考虑用parseFloat来直接强转\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},301:function(n,t){n.exports='### Js 将字符串对象转换成对象的三种方法\r\n\r\n2016-11-21 liujians\r\n\r\n如果某天从后端返回的对象莫名其妙的变成了字符串、需要前端处理成对象、再去取值的话\r\n\r\n那就需要用到、字符串强转对象了\r\n\r\n首先我们要转换的东西可能是这个样子：\r\n\r\n\t\'{"name":"test"}\'\r\n\r\nJSON的标准写法应该是KEY和VALUE都带引号的\r\n\r\n我们要将这样的字符串转为对象、有三种方法可以参考使用\r\n\r\n第一种可能是大家用的非常之多的、用JSON对象下面的方法`.parse()`\r\n\r\n写起来可能是这样的：\r\n\r\n\tvar jsonData = \'{"name":"test"}\';\r\n\tvar obj = JSON.parse(jsonData)\r\n\tconsole.log(obj.name);//"test"\r\n\r\n`JSON.parse()`和`JSON.stringify()` 是我用的比较多的方法\r\n\r\n第二种是利用JS的eval()函数\r\n\r\n\tvar jsonData = \'{"name":"test"}\';\r\n\tvar obj= eval(\'(\'+ jsonData +\')\');\r\n\tconsole.log(obj.name);//"test"\r\n\r\n这里要解释一下、为什么要再eval里面头尾加入圆括号、因为`eval()`是以函数语句解析的、那么其中的{}大括号会用作标记为作用域、或者方法体类似的概念、我们想要把他解析成对象就不会成功了\r\n\r\n\teval(\'{}\')\r\n\teval(\'({})\')//返回的是一个obj\r\n\r\n第三种是用Function对象\r\n\r\n\tvar jsonData = \'{"name":"test"}\';\r\n\tvar obj = new Function(\'return \' + jsonData)();\r\n\tconsole.log(obj.name);//"test"\r\n\r\n原理比较类似第二种、将return 拼接字符串对象、放入function\r\n\r\n执行的时候、由于将字符串解析成了语句、所以return出去的是一个对象\r\n\r\n以上就是今天所要说的三种方法、欢迎补充！\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)'},302:function(n,t){n.exports='### Promise对象的链式调用\n\n2016-12-06 liujians\n\nPromise对象是解决异步回调嵌套的一种方案\n\n现在封装Promise的库很多、像q,bluebrid等等\n\nPromise对象下调用.then方法就可以把异步排个顺序\n\n那么只要返回Promise对象、.then就可以继续下去\n\n首先我们定义三个异步方法\n\n\tvar test ={\n\t\tfunc1:function(){\n\t\t\tvar data = new Promise(function(resolve){\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tresolve("ajax结果111")\n\t\t\t\t},200)\n\t\t\t})\n\t\t\treturn data;\n\t\t},\n\t\tfunc2:function(){\n\t\t\tvar data = new Promise(function(resolve){\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tresolve("ajax结果222")\n\t\t\t\t},100)\n\t\t\t})\n\t\t\treturn data;\n\t\t},\n\t\tfunc3:function(){\n\t\t\tvar data = new Promise(function(resolve){\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tresolve("ajax结果333")\n\t\t\t\t},500)\n\t\t\t})\n\t\t\treturn data;\n\t\t}\n\t}\n\n假设三个方法分别三个ajax\n\n然后\n\n\ttest.func1().then(function(value){\n\t\tconsole.log(value)\n\t\t//do something...\n\t})\n\n那如果想要三个ajax顺序请求、并依赖上一个ajax的结果，该怎么写呢？\n\n可能你会这样做：\n\n\ttest.func1().then(function(value){\n\t\tconsole.log(value)\n\t\ttest.func2().then(function(value){\n\t\t\tconsole.log(value)\n\t\t\ttest.func3().then(function(value){\n\t\t\t\tconsole.log(value)\n\t\t\t\t//do something...\n\t\t\t})\n\t\t})\n\t})\n\n但是这样写跟ajax嵌套一样代码越多越看不清楚...改起来也麻烦\n\n所以要链式调用、并让三个方法顺序执行\n\n\ttest.func1().then(function(value){\n\t\tconsole.log(value)\n\t\t//do something...\n\t\treturn test.func2();\n\t}).then(function(value){\n\t\tconsole.log(value)\n\t\treturn test.func3();\n\t}).then(function(value){\n\t\tconsole.log(value)\n\t})\n\n使用return链式调用、这样代码就清晰明了\n\n也有人说可以简写\n\n    test.func1()\n    .then(test.func2)\n    .then(test.func3)\n    .then(function(value){\n      console.log(value)\n    })\n\n\n希望可以帮助到大家\n___\n本文出自————[http://liujians.me](http://liujians.me)\n'},303:function(n,t){n.exports="### React_PropTypes 记录\r\n\r\n2016-11-29 liujians\r\n\r\n\r\n\r\n\tMyComponent.propTypes = {\r\n\t  // You can declare that a prop is a specific JS primitive. By default, these\r\n\t  // are all optional.\r\n\t  optionalArray: React.PropTypes.array,\r\n\t  optionalBool: React.PropTypes.bool,\r\n\t  optionalFunc: React.PropTypes.func,\r\n\t  optionalNumber: React.PropTypes.number,\r\n\t  optionalObject: React.PropTypes.object,\r\n\t  optionalString: React.PropTypes.string,\r\n\t  optionalSymbol: React.PropTypes.symbol,\r\n\t\r\n\t  // Anything that can be rendered: numbers, strings, elements or an array\r\n\t  // (or fragment) containing these types.\r\n\t  optionalNode: React.PropTypes.node,\r\n\t\r\n\t  // A React element.\r\n\t  optionalElement: React.PropTypes.element,\r\n\t\r\n\t  // You can also declare that a prop is an instance of a class. This uses\r\n\t  // JS's instanceof operator.\r\n\t  optionalMessage: React.PropTypes.instanceOf(Message),\r\n\t\r\n\t  // You can ensure that your prop is limited to specific values by treating\r\n\t  // it as an enum.\r\n\t  optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),\r\n\t\r\n\t  // An object that could be one of many types\r\n\t  optionalUnion: React.PropTypes.oneOfType([\r\n\t    React.PropTypes.string,\r\n\t    React.PropTypes.number,\r\n\t    React.PropTypes.instanceOf(Message)\r\n\t  ]),\r\n\t\r\n\t  // An array of a certain type\r\n\t  optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\r\n\t\r\n\t  // An object with property values of a certain type\r\n\t  optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\r\n\t\r\n\t  // An object taking on a particular shape\r\n\t  optionalObjectWithShape: React.PropTypes.shape({\r\n\t    color: React.PropTypes.string,\r\n\t    fontSize: React.PropTypes.number\r\n\t  }),\r\n\t\r\n\t  // You can chain any of the above with `isRequired` to make sure a warning\r\n\t  // is shown if the prop isn't provided.\r\n\t  requiredFunc: React.PropTypes.func.isRequired,\r\n\t\r\n\t  // A value of any data type\r\n\t  requiredAny: React.PropTypes.any.isRequired,\r\n\t\r\n\t  // You can also specify a custom validator. It should return an Error\r\n\t  // object if the validation fails. Don't `console.warn` or throw, as this\r\n\t  // won't work inside `oneOfType`.\r\n\t  customProp: function(props, propName, componentName) {\r\n\t    if (!/matchme/.test(props[propName])) {\r\n\t      return new Error(\r\n\t        'Invalid prop `' + propName + '` supplied to' +\r\n\t        ' `' + componentName + '`. Validation failed.'\r\n\t      );\r\n\t    }\r\n\t  },\r\n\t\r\n\t  // You can also supply a custom validator to `arrayOf` and `objectOf`.\r\n\t  // It should return an Error object if the validation fails. The validator\r\n\t  // will be called for each key in the array or object. The first two\r\n\t  // arguments of the validator are the array or object itself, and the\r\n\t  // current item's key.\r\n\t  customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\r\n\t    if (!/matchme/.test(propValue[key])) {\r\n\t      return new Error(\r\n\t        'Invalid prop `' + propFullName + '` supplied to' +\r\n\t        ' `' + componentName + '`. Validation failed.'\r\n\t      );\r\n\t    }\r\n\t  })\r\n\t};\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},304:function(n,t){n.exports="### React 笔记\r\n\r\n2016-11-28 liujians\r\n\r\n> 组件类的第一个字母必须大写，否则会报错\r\n\r\n> 组件类只能包含一个顶层标签，否则也会报错\r\n\r\n> JSX中class写成className\r\n\r\n> JSX中for写成htmlFor\r\n\r\n> this.props获取父元素传入的值\r\n\r\n> this.props.children\r\n\r\n> React.Children用来处理子节点\r\n\r\n> PropTypes限制使用组件的参数类型\r\n\r\n> getDefaultProps方法设置参数默认值\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},305:function(n,t){n.exports="### MySql中声明变量和UUID相关函数的使用\r\n\r\n2016-11-28 liujians\r\n\r\n工作中的项目做到用户权限部分了、需要将用户、功能、菜单还有几张关系表做初始化\r\n\r\n说白了、就是插很多很多数据\r\n\r\n那其实可以通过写个脚本、方便去复用和修改\r\n\r\n用到了UUID、因为MySql的默认值是没有UUID的、所以只能通过插值的时候用UUID()的函数来做\r\n\r\n因为UUID还有个依赖的关系、所以要用set的方法做变量声明\r\n\r\n\tSET @Role_User = UPPER(REPLACE(UUID(),'-',''));\r\n\tSET @Role_Admin = UPPER(REPLACE(UUID(),'-',''));\r\n\r\n这里还用到两个函数、第一个是Replace\r\n\r\n顾名思义、就是替换了、这里把生成出的UUID中的`-`横线删掉\r\n\r\n然后用到了UPPER将其中的字幕转换成大写\r\n\r\n之后就可以分开插入到几张表和关联表里了\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},306:function(n,t){n.exports="### MySql 查询日期为星期几的几种方法\r\n\r\n2016-11-22 liujians\r\n\r\n有一个需求、根据周末和工作日不同的情况、做不同的数据处理、\r\n\r\n那么就要区分星期几\r\n\r\n这里查到了几种方法、顺便记录一下\r\n\r\n> DAYNAME(date)\r\n\r\n\tmysql>SELECT DAYNAME('2016-11-22');\r\n\t//Tuesday\r\n\r\n这种方法直接打印出是星期几，适合直接展示的时候用\r\n\r\n> DAYOFWEEK(date)\r\n\r\n\tmysql>SELECT DAYOFWEEK('2016-11-22');\r\n\t//3\r\n\r\n这种是标记数字1——7\r\n\r\n1代表周日，7代表周六、因为外国人都是周日为第一天\r\n\r\n> WEEKDAY(date)\r\n\r\n\tmysql>SELECT WEEKDAY('2016-11-22');\r\n\t//1\r\n\r\n这种是周一到周日对应数组中的下标、从周一到周日分别对应0——6\r\n\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},307:function(n,t){n.exports="### MySql 聚合函数和IF的复杂嵌套\r\n\r\n2016-11-18 liujians\r\n\r\n在一个业务中、我需要做一个将原始打卡表做整合到一张整合表中、方便以后数据的查询又不会打乱原始数据\r\n\r\n原始表中的记录是这样的\r\n\r\n![](http://ogo5zlrgk.bkt.clouddn.com/img/table_2016-11-18.png)\r\n\r\n现在需要整合,将相同日期，且相同用户的数据合并，并留出打卡时间的最大值最小值\r\n\r\n这里中断一下留给大家想一下自己的思路\r\n\r\n...\r\n\r\n博主第一时间想到的是Group By\r\n\r\n通过UserNumber和AttendanceDate分组、并用聚合函数求出ClockTime的最大值最小值\r\n\r\n所以想到这样的一句Sql\r\n\r\n\tSELECT IF(COUNT(a.ClockTime)>1,MIN(a.ClockTime),IF(MIN(a.ClockTime)>'12:00:00',NULL,a.ClockTime)) \r\n\tFROM a \r\n\tGROUP BY a.UserNumber,a.AttendanceDate\r\n\r\n如果按照UserNumber和AttendanceDate分组（合并相同ID并且相同时间的数据）、得到的结果集要求出最小值\r\n\r\n如果ClockTime的总数大于一，说明有两条甚至以上时间记录，那我们求出最大值和最小值就OK了、如果小于等于1、\r\n\r\n那么记录是不足的、再以12点为基准、判断是上午打卡还是下午打卡、另一条记作空\r\n\r\nMySql的IF函数跟三元运算符类似、仔细看看其实很好理解\r\n\r\n根据上面的结论整合之后\r\n\r\n\tSELECT a.UserNumber,a.AttendanceDate \r\n\t\t\t,IF(COUNT(a.ClockTime)>1,MIN(a.ClockTime),IF(MIN(a.ClockTime)>'12:00:00',NULL,a.ClockTime)) AS myMin\r\n\t\t\t,IF(COUNT(a.ClockTime)>1,MAX(a.ClockTime),IF(MAX(a.ClockTime)>'12:00:00',a.ClockTime,NULL)) AS myMax \r\n\tFROM a \r\n\tGROUP BY a.UserNumber,a.AttendanceDate\r\n\r\n这里在SQLyog IDE里面是没有问题的、可以查出并且是四列、要做的就是再插入到新表就OK了、一个人一天只有一条记录\r\n\r\n在这里把代码嵌入到node中报错了\r\n\r\n    ERR:this is incompatible with sql_mode=only_full_group_by\r\n\r\n\r\n百度了好久、也找了好久问题\r\n\r\n最后发现了问题、原因是\r\n\r\n> 子if里的列必须要包一层聚合函数\r\n\r\n> Group by 查出结果集如果查出的列不是Group by的条件列、则必须是聚合函数的列\r\n\r\n就把子IF的结果套上对应的聚合函数吧\r\n\r\n\tSELECT a.UserId,a.AttendanceDate \r\n\t\t\t,IF(COUNT(a.ClockTime)>1,MIN(a.ClockTime),IF(MIN(a.ClockTime)>'12:00:00',NULL,MIN(a.ClockTime))) AS myMin\r\n\t\t\t,IF(COUNT(a.ClockTime)>1,MAX(a.ClockTime),IF(MAX(a.ClockTime)>'12:00:00',MAX(a.ClockTime),NULL)) AS myMax \r\n\tFROM a \r\n\tGROUP BY a.UserNumber,a.AttendanceDate\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},309:function(n,t){n.exports='### 兼容IE8、使用log插件取代原始console.log\r\n\r\n2016-12-05 liujians\r\n\r\nIE8下面会报没有console这个对象、所以用log插件替换是不错的选择\r\n\r\nlog的blog:[http://patik.com/blog/complete-cross-browser-console-log/](http://patik.com/blog/complete-cross-browser-console-log/)\r\n\r\n这个插件代码量很少、用法也非常简单、引入即可\r\n\r\n使用起来就像这样：\r\n\r\n\tlog(111,222,{test:"test"},new Date())\r\n\r\n![](http://ogo5zlrgk.bkt.clouddn.com/image/consolelog.png)\r\n\r\n打印出是一个数组、可以一次打印多个对象或字符串\r\n\r\n好处是做字符串标志时候更方便了\r\n\r\n比如：\r\n\tvar test = [{ test:"test" },{test:"newtest"}];\r\n\r\n这个JSON想要打印出来、但是之前的代码也加了一些打印、为了区分开、你可能是这样：\r\n\r\n\tconsole.log("====test======");\r\n\tconsole.log(test);\r\n\r\n使用了log，你就可以：\r\n\r\n\tlog("test",test);\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)\r\n\r\n'},310:function(n,t){n.exports="### react的学习之路(一)\n\n2017-06-09 liujians\n\n这几天、把公司的项目也忙的差不多了\n\n手头慢慢的多了学习的时间、想到还没有用react做过项目\n\n打算从react开始入手、学习这个全家桶\n\n前几天在看`vue-cli`的结构、`webpack`配置、以及热更新服务器和打包都是怎么写的、为了深入`webpack2.x`、方便自定义`react`的脚手架\n\n官方推荐使用[create-react-app](https://github.com/facebookincubator/create-react-app)\n\n看了看阮一峰老师的教学、觉得虽然只过了一年、但是发现很多东西都换代了、`react-router`已经有了4.x的新写法\n\n再加上webpack的升2.x版本等等、\n\n所以我觉得看阮老师的`react`倒是没太多变化、但是`react-router`和`webpack`、可能学习起来会有误区、所以干脆就找文档看吧\n\n`react`出来也蛮久的了、在国内找一份好的中文文档还是那么不容易\n\n这里找到了`react-router`和`redux`还有`webpack`的文档：\n\n- [react-router](https://reacttraining.cn/)\n- [redux](http://www.redux.org.cn/)\n- [webpack](http://www.css88.com/doc/webpack2/)\n\n然后根据几天的折腾、发现`create-react-app`默认是简易版的、也就是打包之类的命令都给你集合好了、只需要一键\n\n但是这样定制化不太好\n\n找了一圈`yeoman`上面的`gennerator`、发现很多要么webpack没升级、要么结构不完美、\n\n然后经过这几天的折腾、偶然间、我发现了`create-react-app`还有一个变形金刚功能（这样叫比较形象）\n\n\tnpm run eject\n\n这是一个不可逆操作、此操作会把之前的package之类的直接修改\n\n变为一个可拓展的、基于`webpack`的脚手架\n\n估计这才是很多人所需要的\n\n这里也记录一下、我基于他的`webpack`配置、改了几个地方\n\n第一：我发现它的打包是没有分离出vendor的、所以在`webpack.config.prod.js`里面加入了`webpack.optimize.CommonsChunkPlugin`这个插件\n\n第二：它的css-loader默认没有开启modules功能、所以修改成\n\n\t{\n\t\tloader: 'css-loader',\n\t\toptions: {\n\t\t\tmodules: true,\n\t\t\timportLoaders: 1,\n\t\t},\n\t},\n\n后面再看有没有还需要修改的地方吧\n\n6月13日更新\n\n第三：因为使用了css module、所以所有的css名都被转成了hash值、这样有一些公用的css就也要写很多、所以这里把配置改了、让common.css单独不使用css-module\n把cssloader的配置复制了一份、分别加入了exclude和include\n\n    {\n      test: /\\.css$/,\n      use: [\n        require.resolve('style-loader'),\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true,\n            importLoaders: 1,\n          },\n        },\n        {\n          loader: require.resolve('postcss-loader'),\n          options: {\n            ident: 'postcss', // https://webpack.js.org/guides/migrating/#complex-options\n            plugins: () => [\n              require('postcss-flexbugs-fixes'),\n              autoprefixer({\n                browsers: [\n                  '>1%',\n                  'last 4 versions',\n                  'Firefox ESR',\n                  'not ie < 9', // React doesn't support IE8 anyway\n                ],\n                flexbox: 'no-2009',\n              }),\n            ],\n          },\n        },\n      ],\n      exclude: [\n        path.resolve(__dirname, \"../src/css/common.css\")\n      ],\n    },\n    {\n      test: /\\.css$/,\n      use: [\n        require.resolve('style-loader'),\n        {\n          loader: 'css-loader',\n          options: {\n            importLoaders: 1,\n          },\n        },\n        {\n          loader: require.resolve('postcss-loader'),\n          options: {\n            ident: 'postcss', // https://webpack.js.org/guides/migrating/#complex-options\n            plugins: () => [\n              require('postcss-flexbugs-fixes'),\n              autoprefixer({\n                browsers: [\n                  '>1%',\n                  'last 4 versions',\n                  'Firefox ESR',\n                  'not ie < 9', // React doesn't support IE8 anyway\n                ],\n                flexbox: 'no-2009',\n              }),\n            ],\n          },\n        },\n      ],\n      include: [\n        path.resolve(__dirname, \"../src/css/common.css\")\n      ],\n    },\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},311:function(n,t){n.exports="### 单页应用中disqus插件的重载\n\n2017-05-24 liujians\n\ndisqus默认是每个页面引入、然后跳转会重载、\n\n在拓展disqus这套评论插件的时候、遇到了一些小问题、\n\n这里问题在于、我的blog是vue的SPA应用、用router跳转的时候评论插件不会重载、这就尴尬了\n\n遇到问题先[https://www.google.com/](https://www.google.com/)\n\n这里搜索 `disqus ajax` 找到一些结果\n\n看了一下、这里提供的文档\n[https://help.disqus.com/customer/portal/articles/472107-using-disqus-on-ajax-sites\n](https://help.disqus.com/customer/portal/articles/472107-using-disqus-on-ajax-sites)\n\n这样是可以解决问题的\n\n如果还不知道怎么写、可以看它的github例子\n[https://github.com/disqus/DISQUS-API-Recipes/blob/master/snippets/js/disqus-reset/disqus_reset.html](https://github.com/disqus/DISQUS-API-Recipes/blob/master/snippets/js/disqus-reset/disqus_reset.html)\n\n这里虽然可以解决问题、但是想继续探究\n\n引入他的JS之后是有个内置对象的、叫DISQUS\n\n那么我们可不可以打印出这个对象看一下有什么方法呢？\n\n一定是可以的\n\n在控制台输入DISQUS\n\n![](http://ogo5zlrgk.bkt.clouddn.com/image/9D5673D4-AD1C-401C-8AE2-19366739D12D.png)\n\n这里确实有reset的方法\n\n果然如此、那么、问题解决了\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},312:function(n,t){n.exports="### hexo主题制作入坑之旅\r\n\r\n2016-12-10 liujians\r\n\r\nhexo是一个挺好玩的东西、之前也写过ejs、所以打算写一套hexo的主题尝试一下\r\n\r\n首先要全局安装hexo\r\n\r\n\tnpm i hexo -g\r\n\r\n然后找个目录初始化\r\n\t\r\n\thexo init\r\n\r\n---\r\n\r\n中间要等待很久，因为他会自动帮你安装package.json的依赖\r\n\r\n接下来全局安装yeoman\r\n\r\n\tcnpm i -g yo\r\n\r\n然后安装生成主题结构目录工具\r\n\r\n\tnpm i -g generator-hexo-theme\t\r\n\r\n建一个新主题目录\r\n\r\n\tmd test\r\n\tcd test\r\n\r\n\r\n\r\n\tyo hexo-theme\r\n\t\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},313:function(n,t){n.exports="### 制作两端对齐响应式布局\n\n2017-05-29 liujians\n\n以前做的一个例子、现在博客刚刚重构完、所以整理一下放出来\n\n制作这个布局主要用到了`text-align: justify`\n\n大家应该知道、这是文字两端对齐的css样式\n\n但是注意了（敲敲黑板） **没有换行的文本不会生效**\n\n那么这里有一个投机的办法、就是用:after的content属性为它创造换行的环境\n\n用到这个、我还想起了一个和他很像的属性`text-align-last: justify`\n\n但是`text-align-last` 只有IE和Firefox支持\n\n那么就不考虑、喜欢尝试的同学可以下去自己试一下\n\n那么只需要把元素设为`inline-block`并且加上after伪类就可以了\n\n具体代码和例子[点击这里](http://liujians.me/#/example/justifyLayout)\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},314:function(n,t){n.exports="### macvim折腾之路(一)\n\n2017-07-12 liujians\n\n![](http://ogo5zlrgk.bkt.clouddn.com/img/mvim.png)\n\nvim也折腾了接近一周了、虽然还有很多东西没配置完善导致操作会有一些不便、\n\n但是现在想把折腾的经历分享出来、 免得以后忘了\n\nmac本身是自带了vim的、只需要在zsh中\n\n因为是在mac下、更喜欢使用macvim\n\n他会用单独的gui窗口、alfred可以快速的切换过去\n\n使用homebrew安装: \n\n\tbrew install macvim\n\n然后直接在shell中执行: \n\t\n\tmvim\n\n最基本的Macvim就装好了\n\n下一期会把我的配置发出来给大家参考\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},315:function(n,t){n.exports="### macvim折腾之路(二)\n\n2017-07-13 liujians\n\n首先发一下我的vim配置\n\n\t\" =========================================================================\n\t\" DesCRiption: liujians的vimrc文件，for Linux/Mac OSX, GUI/Console\n\t\"\n\t\" Last Change: 2017年07月06日 16时13分\n\t\"\n\t\" Version: 1.00\n\t\" =========================================================================\n\tset helplang=cn\n\t\n\tset fileencodings=utf-8\n\t\n\t\" 显示行号\n\tset number\n\t\" replace tab with space\n\tset expandtab\n\t\" 设定 tab 长度为 2\n\tset tabstop=2\n\tset cindent shiftwidth=2\n\tsyntax enable\n\t\" 自动语法高亮\n\tsyntax on\n\tset cursorline\n\t\" 不设定在插入状态无法用退格键和 Delete 键删除回车符\n\tset backspace=indent,eol,start\n\t\" 自动切换当前目录为当前文件所在的目录\n\tset autochdir\n\t\"在编辑过程中，在右下角显示光标位置的状态行\n\tset ruler\n\t\" 智能自动缩进\n\tset smartindent\n\t\" 显示状态栏 (默认值为 1, 无法显示状态栏)\n\tset laststatus=2\n\t\" 开始折叠\n\tset foldenable\n\tset t_vb=\n\t\" 设置语法折叠\n\tset foldmethod=syntax\n\t\" 高亮显示匹配的括号\n\tset showmatch\n\tset incsearch\n\tset cursorcolumn\n\tset backspace=2\n\t\" Highlight search results\n\tset hlsearch\n\tset incsearch       \"在输入要搜索的文字时，实时匹配\n\t\" ==========\n\t\" Vundle配置\n\t\" ==========\n\tset nocompatible              \" be iMproved, required\n\tfiletype off                  \" required\n\t\n\t\" set the runtime path to include Vundle and initialize\n\tset rtp+=~/.vim/bundle/Vundle.vim\n\tcall vundle#begin()\n\t\n\t\" let Vundle manage Vundle, required\n\tPlugin 'VundleVim/Vundle.vim'\n\t\n\t\" Add your plugin entries bellow this line\n\tPlugin 'altercation/vim-colors-solarized'\n\tPlugin 'Tuxdude/mark.vim'\n\tPlugin 'kien/ctrlp.vim'\n\tPlugin 'terryma/vim-multiple-cursors'\n\tPlugin 'scrooloose/nerdtree'\n\tPlugin 'mattn/emmet-vim'\n\tPlugin 'scrooloose/nerdcommenter'\n\tPlugin 'Shougo/neocomplcache.vim'\n\tPlugin 'jistr/vim-nerdtree-tabs'\n\tPlugin 'scrooloose/syntastic'\n\tPlugin 'Chiel92/vim-autoformat'\n\tPlugin 'Raimondi/delimitMate'\n\tPlugin 'leafgarland/typescript-vim'\n\tPlugin 'majutsushi/tagbar'\n\tPlugin 'danro/rename.vim'\n\tPlugin 'groenewege/vim-less'\n\tPlugin 'easymotion/vim-easymotion'\n\tPlugin 'Quramy/tsuquyomi'\n\tPlugin 'docunext/closetag.vim'\n\tPlugin 'kien/rainbow_parentheses.vim'\n\tPlugin 'bronson/vim-trailing-whitespace'\n\tPlugin 'thinca/vim-quickrun'\n\tPlugin 'sjl/gundo.vim'\n\tPlugin 'tpope/vim-surround'\n\tPlugin 'tpope/vim-repeat'\n\tPlugin 'othree/javascript-libraries-syntax.vim'\n\tPlugin 'vim-airline/vim-airline'\n\tPlugin 'vim-airline/vim-airline-themes'\n\tPlugin 'gko/vim-coloresque'\n\t\n\tPlugin 'ryanoasis/vim-devicons'\n\t\n\t\" All of your Plugins must be added before the following line\n\tcall vundle#end()            \" required\n\tfiletype plugin indent on    \" required\n\t\" :PluginList       - lists configured plugins\n\t\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\t\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\t\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\t\" 主题设置\n\t\" colorscheme desert\n\t\" colorscheme molokai\n\tcolorscheme solarized\n\tautocmd vimenter * NERDTree\n\tautocmd StdinReadPre * let s:std_in=1\n\tautocmd VimEnter * if argc() == 0 && !exists(\"s:std_in\") | NERDTree | endif\n\tlet NERDTreeQuitOnOpen=1\n\tlet g:user_emmet_install_global = 0\n\tautocmd FileType html,css EmmetInstall\n\t\n\t\n\t\" 显示行号\n\tlet NERDTreeShowLineNumbers=1\n\tlet NERDTreeAutoCenter=1\n\t\" 是否显示隐藏文件\n\tlet NERDTreeShowHidden=1\n\t\" 设置宽度\n\tlet NERDTreeWinSize=31\n\t\" 在终端启动vim时，共享NERDTree\n\tlet g:nerdtree_tabs_open_on_console_startup=0\n\t\" 忽略一下文件的显示\n\tlet NERDTreeIgnore=['\\.pyc','\\~$','\\.swp']\n\tautocmd VimEnter * NERDTree\n\twincmd w\n\tautocmd VimEnter * wincmd w\n\t\n\t\"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!\n\t\" Disable AutoComplPop.\n\tlet g:acp_enableAtStartup = 0\n\t\" Use neocomplcache.\n\tlet g:neocomplcache_enable_at_startup = 1\n\t\" Use smartcase.\n\tlet g:neocomplcache_enable_smart_case = 1\n\t\" Set minimum syntax keyword length.\n\tlet g:neocomplcache_min_syntax_length = 3\n\tlet g:neocomplcache_enable_auto_select = 1\n\tlet g:neocomplcache_lock_buffer_name_pattern = '\\*ku\\*'\n\t\n\t\" Enable heavy features.\n\t\" Use camel case completion.\n\t\"let g:neocomplcache_enable_camel_case_completion = 1\n\t\" Use underbar completion.\n\t\"let g:neocomplcache_enable_underbar_completion = 1\n\t\n\t\" Define dictionary.\n\tlet g:neocomplcache_dictionary_filetype_lists = {\n\t      \\ 'default' : '',\n\t      \\ 'vimshell' : $HOME.'/.vimshell_hist',\n\t      \\ 'scheme' : $HOME.'/.gosh_completions'\n\t      \\ }\n\t\n\t\" Define keyword.\n\tif !exists('g:neocomplcache_keyword_patterns')\n\t  let g:neocomplcache_keyword_patterns = {}\n\tendif\n\tlet g:neocomplcache_keyword_patterns['default'] = '\\h\\w*'\n\t\n\t\" Plugin key-mappings.\n\tinoremap <expr><C-g>     neocomplcache#undo_completion()\n\tinoremap <expr><C-l>     neocomplcache#complete_common_string()\n\t\n\t\" Recommended key-mappings.\n\t\" <CR>: close popup and save indent.\n\tinoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\n\tfunction! s:my_cr_function()\n\t  return neocomplcache#smart_close_popup() . \"\\<CR>\"\n\t  \" For no inserting <CR> key.\n\t  \"return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\n\tendfunction\n\t\" <TAB>: completion.\n\tinoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\t\" <C-h>, <BS>: close popup and delete backword char.\n\tinoremap <expr><C-h> neocomplcache#smart_close_popup().\"\\<C-h>\"\n\tinoremap <expr><BS> neocomplcache#smart_close_popup().\"\\<C-h>\"\n\tinoremap <expr><C-y>  neocomplcache#close_popup()\n\tinoremap <expr><C-e>  neocomplcache#cancel_popup()\n\t\n\t\" Enable omni completion.\n\tautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\n\tautocmd FileType html,markdown,vue setlocal omnifunc=htmlcomplete#CompleteTags\n\tautocmd FileType javascript,ts,tsx setlocal omnifunc=javascriptcomplete#CompleteJS\n\t\n\tlet g:syntastic_error_symbol='>>'\n\tlet g:syntastic_warning_symbol='>'\n\tlet g:syntastic_check_on_open=1\n\tlet g:syntastic_check_on_wq=0\n\tlet g:syntastic_enable_highlighting=1\n\tlet g:syntastic_javascript_checkers = ['eslint']\n\tlet g:tsuquyomi_disable_quickfix = 1\n\tlet g:syntastic_typescript_checkers = ['tsuquyomi']\n\tlet g:used_javascript_libs = 'underscore,backbone,react,vue,jquery'\n\t\" to see error location list\n\tlet g:syntastic_always_populate_loc_list = 0\n\tlet g:syntastic_auto_loc_list = 0\n\tlet g:syntastic_loc_list_height = 5\n\tlet g:formatdef_eslint = '\"SRC=eslint-temp-${RANDOM}.js; cat - >$SRC; eslint --fix $SRC >/dev/null 2>&1; cat $SRC | perl -pe \\\"chomp if eof\\\"; rm -f $SRC\"'\n\tlet g:formatdef_tsfmt = '\"tsfmt --stdin '.bufname('%').'\"'\n\tlet g:formatters_javascript = ['eslint']\n\tlet g:autoformat_autoindent = 0\n\tlet g:autoformat_retab = 0\n\tlet g:autoformat_remove_trailing_spaces = 0\n\t\n\tautocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1\n\tautocmd BufReadPre *.vue let b:javascript_lib_use_vue = 1\n\tautocmd BufReadPre *.tsx let b:javascript_lib_use_react = 1\n\t\n\tlet g:formatterpath = ['/Users/liujians/formatters']\n\t\n\tlet g:typescript_indent_disable = 1\n\tlet g:typescript_opfirst='\\%([<>=,?^%|*/&]\\|\\([-:+]\\)\\1\\@!\\|!=\\|in\\%(stanceof\\)\\=\\>\\)'\n\tlet g:typescript_compiler_binary = 'tsc'\n\tlet g:typescript_compiler_options = ''\n\tautocmd FileType typescript :set makeprg=tsc\n\tautocmd FileType typescript setlocal completeopt-=menu\n\tautocmd QuickFixCmdPost [^l]* nested cwindow\n\tautocmd QuickFixCmdPost    l* nested lwindow\n\t\n\t\n\tlet g:tagbar_width=35\n\tlet g:tagbar_autofocus=1\n\t\n\t\n\tlet g:ctrlp_map = '<c-p>'\n\tlet g:ctrlp_cmd = 'CtrlP'\n\tset wildignore+=*/tmp/*,*.so,*.swp,*.zip     \" MacOSX/Linux\n\tlet g:syntastic_auto_loc_list = 0\n\tlet g:closetag_html_style=1\n\tlet g:quickrun_config = {\n\t\\   \"_\" : {\n\t\\       \"outputter\" : \"message\",\n\t\\   },\n\t\\}\n\t\n\tlet g:quickrun_no_default_key_mappings = 1\n\t\n\t\n\t\"map\n\t\" 关闭NERDTree快捷键\n\tmap <C-F> :NERDTreeToggle<CR>\n\tmap <Leader><leader>h <Plug>(easymotion-linebackward)\n\tnmap <F6> :TagbarToggle<CR>\n\tmap <Leader><leader>l <Plug>(easymotion-lineforward)\n\tmap <leader><space> :FixWhitespace<cr>\n\tmap <F3> :Autoformat<CR>:w<CR>\n\tnnoremap <F5>   <Esc>:w<CR>:!g++ -std=c++11 % -o /tmp/a.out && /tmp/a.out<CR>\n\tnnoremap <F7>   <Esc>:w<CR>:!g++ -std=c++11 %<CR>\n\tnnoremap <C-F5> <Esc>:w<CR>:!g++ -std=c++11 -g % -o /tmp/a.out && gdb /tmp/a.out<CR>\n\tnmap <Leader>z <Plug>(quickrun)\n\tmap <F10> :QuickRun<CR>\n\tnnoremap <leader>g :GundoToggle<CR>\n\tnmap <leader>o :!open .<CR>\n\tnmap <leader>l :!open -a '/Applications/Google Chrome.app' ./index.html<CR>\n\t\n\t\"字号\n\t\"set guifont=Monaco:h16\n\t\"set lines=35 columns=118\n\t\"hi Normal ctermbg=Black ctermfg=white\n\tset guifont=Droid\\ Sans\\ Mono\\ for\\ Powerline\\ Nerd\\ Font\\ Complete\\:h14\n\tset encoding=utf-8\n\t\" required if using https://github.com/bling/vim-airline\n\tlet g:airline_powerline_fonts=1\n\t\n\tset ambiwidth=double\n\tlet g:WebDevIconsNerdTreeAfterGlyphPadding = ''\n\n装了很多插件、用这些插件和npm全局装的eslint等完成了代码报错和格式化代码以及高亮等功能、\n\n总之这次折腾收获很大、如果再让我选择重来一次、我还会折腾这个编辑器。\n\n虽然学到的不是技术、但是学到的是解决问题的能力、\n\n相信以后、在开发的路上、我能承受更多问题带来的压力\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},316:function(n,t){n.exports='### 判断浏览器为PC还是移动端\n\n2016-11-23 liujians\n\n判断userAgent、根据正则、找出对应的设备或者浏览器\n\n\t<script type="text/javascript">\n        function browserRedirect() {\n            var sUserAgent = navigator.userAgent.toLowerCase();\n            var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";\n            var bIsIphoneOs = sUserAgent.match(/iphone os/i) == "iphone os";\n            var bIsMidp = sUserAgent.match(/midp/i) == "midp";\n            var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";\n            var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";\n            var bIsAndroid = sUserAgent.match(/android/i) == "android";\n            var bIsCE = sUserAgent.match(/windows ce/i) == "windows ce";\n            var bIsWM = sUserAgent.match(/windows mobile/i) == "windows mobile";\n            document.writeln("您的浏览设备为：");\n            if (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) {\n                document.writeln("phone");\n            } else {\n                document.writeln("pc");\n            }\n        }\n\n        browserRedirect();\n    <\/script>\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n\n'},317:function(n,t){n.exports='### ohmyzsh\n\n2017-07-09 liujians\n\n最近想开始折腾vim了、发现买了mac之后还没怎么好好弄一下vim和shell\n\n先尝试着把bash换成zsh\n\ngithub上有一个很好的项目叫ohmyzsh、打算用这个搞\n\noh-my-zsh 地址:[https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n用官网的方式安装\n\nsh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"\n\n这里.zshrc的配置我没怎么动、只改了插件部分\n\n\tplugins=(git osx zsh-syntax-highlighting)\n\n\tsource $ZSH/oh-my-zsh.sh\n\tsource /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\t\n\t\n我这里装了一个高亮插件、叫zsh-syntax-highlighting、需要用Homebrew下载\n\t\n\tbrew install zsh-syntax-highlighting\n\t\n切换为zsh\n\n\tchsh -s /bin/zsh\n\t\n搞定、如果你想要换主题、只需要修改配置\n\n\t# 此处为你想换的主题\n\tZSH_THEME="robbyrussell" \n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n'},318:function(n,t){n.exports='### 利用padding制作响应式正方形\n\n2017-05-28 liujians\n\n端午放假了、在家闲来无事，整理了一下以前的东西\n\n有些情况下、我们要做响应式的布局、来应对多设备、或者多分辨率\n\n来个简单的需求\n\n**需求：每行三个正方形、依次排开、做列表、流式**\n\n最简单的需求出来了、那我们直接开搞\n\n首先、我们要了解到、padding的百分比是基于谁的\n\n这里敲了几下黑白、这道送分题、相信很多人心中已经知道了答案\n\n那就是 **基于父元素的宽度**\n\n注意、是宽度、也就是说、利用这个特性、我们父子元素保持宽度一致、\n\n子元素的padding是100%、就可以达到效果\n\n\t<style>\n\t\t.square-box{\n\t      box-sizing: border-box;\n\t      width:30%\n\t    }\n\t    .square{\n\t    \twidth:100%;\n\t    \tpadding-bottom: 100%;\n\t    \tbackground: red;\n    \t\tbox-sizing: border-box;\n\t    }\n\t</style>\n\t<div class="square-box">\n\t\t<div class="square"></div>\n\t</div>\n\n这样做好了一个、那么三个一排、只需要用float就可以了\n\n我们做好了最基本的布局、那么新的需求来了\n\n**我们的列表、图片是正方形的、下方要加入一段说明文字**\n\n那么就在这样的基础上、每个列表项增加固定的高度就好了\n\n最简单的方式、在此基础上、直接给square加上`padding-top:30px;`就可以了\n\n因为padding-bottom的高度是100%、那么会在原本的正方形上面再加高30px\n\n那么还有一个问题、列表项之间也不可能挨着啊、之间的间隙怎么做呢？\n\n两种方案：\n\n最简单的就是给父元素加padding、\n\n这里如果是移动端的用户、且考虑安卓4.4版本以上的开发者、可以使用calc来做\n\n这里把两种都写在了一个例子里:[点击这里](http://liujians.me/#/example/paddingSquare)\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n'},319:function(n,t){n.exports="### 使用qshell和alfred-workflow-qshell快速操作七牛云\n\n2017-07-06 liujians\n\n用七牛云也有一年之久了、频率一直不高、原因是懒得弄图片。。。\n\n最新想上传图片了、发现七牛云官方提供了qshell这个工具、很方便、可以用shell命令操作单文件或者多文件的上传\n\n#### qshell\n\nqshell官方文档：[https://github.com/qiniu/qshell](https://github.com/qiniu/qshell)\n\n如果用web上传、可能要操作四部、甚至更多、那如果用shell上传、就很方便了\n\n首先在文档的下载部分、下载对应的版本\n\n这里我用的mac系统、所以下载了Mac OSX 64位的版本\n\n下载好了之后、修改名字为qshell\n\n\tmv qshell-darwin-x64 qshell\n\t\n移动到目录`/usr/local/bin`中\n\n\tcp qshell /usr/local/bin\n\t\n然后就可以在全局下输入命令来查看当前的ak和sk\n\n\tqshell account\n\n如果这行命令成功了、说明你qshell已经可以用了\n\n#### alfred-workflow-qshell\n\nalfred-workflow-qshell是一个基于alfred workflow的插件、\n\n其实说白了就是为了帮你把你终端下的命令、放到alfred上执行、作者重封装了这些命令\n\n下载地址：[https://github.com/onestark/alfred-workflow-qshell](https://github.com/onestark/alfred-workflow-qshell)\n\n然后就可以在alfred里面输入fput试试上传了\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},320:function(n,t){n.exports="### 使用web ppt做react技术栈的粗略分享\r\n\r\n2017-06-21 liujians\r\n\n明天周四了、要在公司给公司没有了解过react的同事的开发做一个react粗略的分享\n\n做了一个ppt、使用reveal.js写的\n\n[关于reveal.js](https://github.com/hakimel/reveal.js)\n\n我在群里发、当时很多人不理解、为什么写ppt、不用wps、keynote之类的东西呢？\n\n其实很简单、代码写惯了、让你用keynote、拖东西、加动画、很不顺畅、估计事倍功半\n\n用reveal.js、切换效果一个配置就搞定了、需要加动画的地方直接加class、而且自带整合了zoom和notes的功能\n\n关于reveal.js、还有很多配置没有用到、希望以后有机会做ppt的时候用到\n\n现在ppt已经发到线上了、地址是:\n\n[http://liujians.me/react-share/](http://liujians.me/react-share/)\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},321:function(n,t){n.exports="### react的学习之路(三)\n\n2017-06-14 liujians\n\n上一期把路由弄上了、根据官方文档来做很简单\n\n现在打算做组件的状态共享了\n\n首选redux\n\n写过vue的同学肯定发现redux其实和vuex有相似之处\n\nredux中涉及到reducer action store\n\n要想使用redux、首先肯定是引入\n\n    import { applyMiddleware, createStore } from 'redux';\n\n引入了两个东西、第一个是应用中间件的方法、第二个是创建store的方法\n\ncreateStore需要一个参数、那就是reducer、是一个纯函数\n\n    function counter(state = { count: 0 }, action) {\n        const count = state.count\n        switch (action.type) {\n            case 'INCREMENT':\n                return {count:count + 1};\n            case 'DECREMENT':\n                return {count:count - 1};\n            default:\n                return state\n        }\n    }\n\nreducer传入之后、store就创建出来了、但是state是默认的值、需要触发修改、需要有一个action\n\naction通常会由一个函数来创建、免得每次都要构建\n\n    function addAction(type){\n      return {\n        type,\n        name:'action'\n      }\n    }\n\n如何调用触发更新state呢\n\nstore下面有几个常用的属性\n\n    store.dispatch(addAction('INCREMENT'))//传入action触发reducer\n\n    store.getState()//获取当前的state\n\n    store.subscribe(() =>\n      console.log('update')//每当state发生变化回调触发\n    );\n\n对于react使用redux、为了简化、作者写了一个react-redux\n\n使用react-redux、需要使用额外的api\n\n    import { connect,Provider } from 'react-redux'\n\n    // Map Redux state to component props\n    function mapStateToProps(state) {\n      return {\n        value: state.count\n      }\n    }\n\n    // Map Redux actions to component props\n    function mapDispatchToProps(dispatch) {\n      return {\n        onIncreaseClick: () => dispatch(increaseAction)\n      }\n    }\n\n    About = connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(About)\n\n把about组件传进去、然后建立一个带connect的组件、会把值通过mapStateToProps和mapDispatchToProps这两个方法转化、变成参数传到组件中去\n\n还需要一个react-redux提供的组件来完成这个功能\n\n    <Provider store={store}>\n      <About />\n    </Provider>\n\n这样就大功告成了\n\n更多redux的中文教程、可以参考：[http://www.redux.org.cn/](http://www.redux.org.cn/)\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},322:function(n,t){n.exports="### react的学习之路(二)\n\n2017-06-13 liujians\n\n创建完了react的项目、想着弄的完整点、自然要用到react-router做路由控制\n\n4.x的react-router写法上还是较以前有很多不同的\n\n我是照着官方文档的例子学习的、贴地址\n\n[https://reacttraining.cn/web/guides/quick-start](https://reacttraining.cn/web/guides/quick-start)\n\n首先\n\n> npm install --save react-router-dom\n\n然后就是引入他的里面的几个东西\n\n    import React from 'react'\n    import {\n      BrowserRouter as Router,\n      Route,\n      Link\n    } from 'react-router-dom'\n\n然后就是写组件、组件分为三个、一个主页也相当于根视图、其他两个是路由切换页面\n\nRouter作为根容器、然后Route和Link作为切换组件和链接\n\n组件有一个match参数、可以match.url取到对应的url、或者match.params\n\nrouter的功能暂时只用到这里、后面再陆续补充\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},323:function(n,t){n.exports="### 判断滚动条是向上还是向下\n\n2017-05-27 liujians\n\n在写wap中遇到了这个需求、把代码记录下来吧\n\n    $(document).ready(function(){\n        var position=0,top=0;\n\n        $(window).scroll(function(e){\n                position = $(this).scrollTop();\n\n                if(top<=position){//下滚\n                    .......\n                }\n\n                else{//上滚\n                    .......\n                }\n                setTimeout(function(){top = position;},0);\n        });\n    });\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},324:function(n,t){n.exports="### MySql 临时表的使用\r\n\r\n2016-11-15 liujians\r\n\r\n这是之前写到的一个功能、因为一直做前端，刚开始做后端的东西、很多稍复杂的查询都没有思路\r\n\r\n现在的场景有个功能、批量审批用户的加班、相同用户累计调休时间。更新到userinfo表中\r\n\r\n没听懂没关系，我们拆开看：\r\n\r\n1. 审批的用户可能是多个\r\n2. 批量审批中、如果有ID相同的用户需要累计被审批的时间相加\r\n3. 不同用户的时间分开计算\r\n4. 计算出结果后、更新到用户表的每个用户字段\r\n\r\n按这样的逻辑来看、前台传过来的记录ID我们只需要查询出对应的userId和他们的审批时间集合、然后用group by 分组就好\r\n\r\n显示出来的东西我们要更新到userinfo可能就稍微有点麻烦\r\n\r\n我也是那次第一次听说有临时表的概念\r\n\r\n听人讲了一下、那就要尝试一下\r\n\r\n    CREATE TEMPORARY TABLE IF NOT EXISTS tmp \r\n    (\r\n    UserId INT UNSIGNED NOT NULL,\r\n    DurationTime DECIMAL(4,1) NOT NULL\r\n    )\r\n    ENGINE=MEMORY; -- change engine type if required e.g myisam/innodb\r\n    \r\n    INSERT INTO tmp (UserId, DurationTime) \r\n    (SELECT UserId,SUM(oq.OverTimeDuration) FROM overtimerequest oq WHERE oq.OverTimeRequestId IN (2,5,7,9) GROUP BY UserId);\r\n    \r\n\r\n首先创建一个临时表\r\n\r\n用作记录每个用户对应的ID和审批时间集合（用作中间层）\r\n\r\n然后把临时表的数据、用作表连接更新到userinfo表\r\n\r\n\tUPDATE userinfo ui \r\n    JOIN tmp \r\n        ON ui.UserId = tmp.UserId \r\n    SET ui.DurationTime = ui.DurationTime+tmp.DurationTime\r\n\r\n最后别忘了删除临时表\r\n\r\n\tDROP TABLE tmp\r\n\r\nover~\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},325:function(n,t){n.exports='### 使用formidable做node的文件上传，并利用iframe让表单提交不跳转\r\n\r\n2016-11-14 liujians\r\n\r\n今天做功能做到了文件上传、之前做过img的上传是用的h5的fileReader对象转base64上传\r\n遇到纯数据文件上传确实做的时候遇到了很多问题\r\n\r\n开始的时候想的用ajax传（以前base64就是长字符串、可以用ajax），发现ajax只能传字符串、不然就要引用插件、对于现在的项目来说、引入插件也会变得冗余、所以寻求一个其他的方法\r\n\r\n先没管那么多、先用表单传过去看看吧、发现传文件流需要给from表单一个比较重要的属性`enctype="multipart/form-data"`\r\n\r\n这里是前台代码v-on：change的方法可以理解成onchange触发submit()\r\n\r\n\t\t<form id="fileForm" method="post" action="/data/import" enctype="multipart/form-data" >\r\n        \t<a href="#" class="btn btn-primary uploaderBtn">\r\n       \t\t\t上传\r\n                <input type="file" id="test" name="files" v-on:change="importData(\'fileForm\')"/>\r\n            </a>\r\n        </form>\r\n\r\n提交之后、node这边应该用我们的主角formidable抓取请求了\r\n\r\n首先install这一步是一定的\r\n\r\n    npm install formidable --save-dev\r\n\t//fs文件操作模块（可选项）\r\n\tnpm install formidable --save-dev\r\n\r\n用require的方式引入\r\n\r\n\tvar formidable = require(\'formidable\');\r\n\tvar fs = require(\'fs\');\r\n\r\n方法中我们要先new一个formidable对象并设置他的属性\r\n\r\n\tvar form = new formidable();\r\n\tform.encoding = \'utf-8\';\t\t//设置编辑\r\n    form.uploadDir = \'static\'\t //设置上传目录\r\n    form.keepExtensions = true;\t //保留后缀\r\n    form.maxFieldsSize = 2 * 1024 * 1024;   //文件大小\r\n\r\n调用form.parse()方法\r\n\t\r\n\tform.parse(req, (err, fields, files)=>{\r\n\t\t\r\n\t\tif (err) {\r\n          console.log("文件上传报错"+err);\r\n\t      res.send(err);\t\t\r\n\t    }\r\n\t\t//这里我把上传的文件读取出来\r\n\t\tvar data = fs.readFileSync(files.files.path,\'utf-8\');\r\n\t\t//你要做的操作\r\n\t\t...\r\n\t}\r\n\r\n到了这一步、上传可以实现了、但是前台传完文件之后会跳转到action的地址、这对于我来说是不想看到的\r\n\r\n所以便有了iframe的出现\r\n\r\n\t\t<iframe name="testIframeName" style="display:none;"></iframe>\r\n        <form target="testIframeName" id="fileForm" method="post" action="/data/import" enctype="multipart/form-data" >\r\n        \t<a href="#" class="btn btn-primary uploaderBtn">\r\n        \t\t上传\r\n        \t\t<input type="file" id="test" name="files" v-on:change="importData(\'fileForm\')"/>\r\n        \t</a>\r\n        </form>\r\n\r\n改写了一下前台页面、加入了一个iframe并且把他们用target链接到一起、意义在于、form提交之后、iframe去跳转、form表单不会跳转、iframe是看不见的、所以达到了简单实现我们要的效果\r\n\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)'},326:function(n,t){n.exports='### 使用Vue的props做组件的通信\n\n2016-11-18 liujians\n\nvue比较方便的就是自己抽象组件、做代码分离和代码复用、\n\n抽离出的组件有自己的数据、自己的方法\n\n那么抽离出的组件如果需要依赖传入参数怎么办呢？\n\n这里给出一种方案、就是用props做父子通信\n\n首先就用我博客的头部组件代码为例（现在已经重构、旧版blog的代码仅供参考）\n\n\t<template>\n\t\t<div class="content-header">\n\t\t\t<h1>\n\t\t\t\t{{title}}\n\t\t\t\t<small>{{v}}</small>\n\t\t\t</h1>\n\t\t\t<ol class="breadcrumb">\n\t\t\t\t<li v-for="(i,index) in menuList" v-bind:class="{ active: i.isActive}">\n\t\t\t\t\t<router-link :to="{name:i.url}">{{i.text}}</router-link>\n\t\t\t\t</li>\n\t\t\t\t\x3c!-- <li class="active">异常考勤记录</li> --\x3e\n\t\t\t</ol>\n\n\t\t</div>\n\t</template>\n\t<script>\n\t\texport default {\n\t\t  name: \'content_header\',\n\t\t  data(){\n\t\t  \treturn {\n\t\t  \t\ttitle:"Welcome",\n\t\t  \t\tv:"liujians.me"\n\t\t  \t}\n\t\t  },\n\t\t  props: [\'menuList\']\n\t\t}\n\t<\/script>\n\n仔细看的话代码并不难、这里v-for用到了一个menuList、但是我们的data里面并没有menuList\n\n所以menuList的含义是、哪个页面使用、就需要传递参数进来、对应的模板就会变化\n\n页面的引用就可以用 import 或者 require :\n\n\timport contentHeader from \'./content_header\'\n\n然后在你的Vue实例中引用：\n\n\texport default{\n\t\tdata(){\n\t      \treturn {\n\t\t        menuList:[\n\t\t          {\n\t\t            text:"建站笔记",\n\t\t            isActive:"true",\n\t\t            url:"createNote"\n\t\t          }\n\t\t        ]\n\t\t\t}\n\t\t},\n\t\tcomponents:{\n\t      contentHeader,\n\t    }\n\t}\n\n页面上的组件就绑定页面中的menuList数组就可以传递过去了\n\n\t<content-header v-bind:menuList="menuList"></content-header>\n\n页面上引用完毕、可以达到我们想要的效果了\n\n当然还有一种方法、通过$parent获取父组件的相关属性和数据\n\n我们可以在子组件的方法中通过\n\n\tthis.$parent.dataname\n\n获取到父组件数据、甚至可以重新为父组件数据赋值\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n'},327:function(n,t){n.exports="### webpack 笔记(一有机会就更新)\r\n\r\n2016-12-08 liujians\r\n\r\n\t# 全局安装\r\n\t$ npm install webpack -g\r\n\t# 安装 webpack 依赖\r\n\t$ npm install webpack --save-dev\r\n\t# 查看 webpack 版本信息\r\n\t$ npm info webpack\r\n\t# 使用 Webpack 开发工具\r\n\t$ npm install webpack-dev-server --save-dev\r\n\t# 将入口文件（entry）打包成bundle 自动载入引入的JS\r\n\t$ webpack entry.js bundle.js\r\n\t# 安装loader\r\n\t$ npm install css-loader style-loader\r\n\t# 下载babel-loader模块\r\n\t$ npm install --save-dev babel-loader\r\n\t# 下载babel-preset-es2015，这样确保babel能解析ES6的最新特性\r\n\t$ npm install --save-dev babel-preset-es2015\r\n\t$ npm install babel-core --save-dev\r\n\t# 输出内容带有进度、颜色、结果输出为JSON\r\n\t$ webpack --progress --colors --watch --json\r\n\t# 开启监听模式\r\n\t$ webpack --watch\r\n\t# 压缩混淆脚本\r\n\t$ webpack -p\r\n\t# 生成map映射文件，告知打包到那里了\r\n\t$ webpack -d\r\n\t# inline模式启动server\r\n\t$ webpack-dev-server --inline\r\n\r\n\r\n> 关于配置项\r\n\t\r\n\tmodule.loader: 其中test是正则表达式，对符合的文件名使用相应的加载器./.css$/会匹配 xx.css文件，但是并不适用于xx.sass或者xx.css.zip文件.\r\n\turl-loader: 它会将样式中引用到的图片转为模块来处理; 配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式。\r\n\tentry: 模块的入口文件。依赖项数组中所有的文件会按顺序打包，每个文件进行依赖的递归查找，直到所有模块都被打成包；\r\n\toutput：模块的输出文件，其中有如下参数：\r\n\tfilename: 打包后的文件名\r\n\tpath: 打包文件存放的绝对路径。\r\n\tpublicPath: 网站运行时的访问路径。\r\n\trelolve.extensions: 自动扩展文件的后缀名，比如我们在require模块的时候，可以不用写后缀名的。\r\n\trelolve.alias: 模块别名定义，方便后续直接引用别名，无须多写长长的地址\r\n\tplugins 是插件项;\r\n\r\n> 插件\r\n\r\n\tnew webpack.optimize.UglifyJsPlugin({\r\n      \tcompress: {\r\n      \t  warnings: false\r\n      \t},\r\n\t\texcept: ['$super', '$', 'exports', 'require']\r\n    }),\r\n\tnew HtmlWebpackPlugin({\r\n      filename: 'index.html',\r\n      template: 'index.html',\r\n      inject: true\r\n    })\r\n___\r\n本文出自————[http://liujians.me](http://liujians.me)"},328:function(n,t){n.exports="### zepto拓展getScript函数用作跨域\n\n2016-12-16 liujians\n\n为zepto扩展getScript方法\n\n用到了、直接贴代码\n\n\tvar _getScript = function(url, callback) {\n\t    var head = document.getElementsByTagName('head')[0],\n\t        js = document.createElement('script');\n\n\t    js.setAttribute('type', 'text/javascript');\n\t    js.setAttribute('src', url);\n\n\t    head.appendChild(js);\n\n\t    //执行回调\n\t    var callbackFn = function(){\n\t            if(typeof callback === 'function'){\n\t                callback();\n\t            }\n\t        };\n\n\t    if (document.all) { //IE\n\t        js.onreadystatechange = function() {\n\t            if (js.readyState == 'loaded' || js.readyState == 'complete') {\n\t                callbackFn();\n\t            }\n\t        }\n\t    } else {\n\t        js.onload = function() {\n\t            callbackFn();\n\t        }\n\t    }\n\t}\n\t//如果使用的是zepto，就添加扩展函数\n\tif(Zepto){\n\t    $.getScript = _getScript;\n\t}\n\n___\n本文出自————[http://liujians.me](http://liujians.me)\n"},344:function(n,t){n.exports={render:function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",[e("markdown-page",{attrs:{text:n.str}}),n._v(" "),e("money-reward"),n._v(" "),e("div",{attrs:{id:"disqus_thread"}})],1)},staticRenderFns:[]}}});
//# sourceMappingURL=0.c4dcaf47443c3c263de3.js.map